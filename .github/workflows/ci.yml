name: ci

on:
  push:
    branches: [main]
    tags: ['v*.*.*'] # релизный прогон при пуше тега vX.Y.Z
  pull_request:

permissions:
  contents: write # создать ветку release/* и публиковать релиз
  packages: read

concurrency:
  group: ci-${{ github.ref }}
  cancel-in-progress: true

env:
  IMAGE_REPO: ${{ secrets.DOCKERHUB_USERNAME }}/${{ github.event.repository.name }}
jobs:
  ci:
    name: Lint/Build/Test
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
          cache: npm
      - run: npm ci
      - run: npm run lint --if-present
      - run: npm run build
      - run: npm test --if-present

  docker:
    name: Build & Push Docker (only on tag)
    runs-on: ubuntu-latest
    needs: ci
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      - name: Resolve version
        id: ver
        run: |
          echo "version=${GITHUB_REF_NAME}" >> $GITHUB_OUTPUT
          echo "ref_sha=$(git rev-list -n 1 ${GITHUB_REF_NAME})" >> $GITHUB_OUTPUT

      - uses: docker/setup-qemu-action@v3
      - uses: docker/setup-buildx-action@v3

      - uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build & Push
        uses: docker/build-push-action@v6
        with:
          context: .
          file: Dockerfile
          platforms: linux/amd64,linux/arm64
          push: true
          tags: |
            ${{ env.IMAGE_REPO }}:${{ steps.ver.outputs.version }}
            ${{ env.IMAGE_REPO }}:latest
          cache-from: type=gha
          cache-to: type=gha,mode=max

      - name: Create release branch from tag
        uses: actions/github-script@v7
        with:
          script: |
            const tag = process.env.GITHUB_REF_NAME;    // v1.2.3
            const sha = "${{ steps.ver.outputs.ref_sha }}";
            const ref = `refs/heads/release/${tag}`;
            try {
              await github.rest.git.createRef({
                owner: context.repo.owner,
                repo: context.repo.repo,
                ref,
                sha
              });
              core.info(`Created ${ref} at ${sha}`);
            } catch (e) {
              if (e.status === 422) core.info(`Branch ${ref} already exists, skip`);
              else throw e;
            }

  gh_release:
    name: Publish GitHub Release (only on tag)
    runs-on: ubuntu-latest
    needs: [ci, docker]
    if: startsWith(github.ref, 'refs/tags/v')
    steps:
      - uses: actions/checkout@v4

      # Автогенерация release notes по истории коммитов/PR
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v2
        with:
          tag_name: ${{ github.ref_name }} # vX.Y.Z
          name: ${{ github.ref_name }}
          draft: false
          prerelease: false
          generate_release_notes: true
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
